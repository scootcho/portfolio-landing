<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: time | Assemblying Scottbot]]></title>
  <link href="http://scootcho.github.io/blog/categories/time/atom.xml" rel="self"/>
  <link href="http://scootcho.github.io/"/>
  <updated>2014-07-26T13:15:14+08:00</updated>
  <id>http://scootcho.github.io/</id>
  <author>
    <name><![CDATA[Scott Yu]]></name>
    <email><![CDATA[scott.tj.yu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor Learning Lesson2]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/26/meteor-learning-lesson2/"/>
    <updated>2014-07-26T13:08:43+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/26/meteor-learning-lesson2</id>
    <content type="html"><![CDATA[<p>Completed Lesson 2 of the <a href="https://www.youtube.com/playlist?list=PLKfAG4yMwKkRT4SVt_j04AnZSKcdYPFgx">Meteor Learning Playlist</a>. Below were some of the challenges I encountered and work arounds.</p>

<p>Problem: views did not render properly, instead of the views, it was rendering &ldquo;[object Object]&rdquo; in its place. After some digging around and help from people, it turns out that <code>Meteor.Router</code> is deprecated.</p>

<p>So instead of</p>

<p><code>mrt add router</code></p>

<p>do</p>

<p><code>mrt add iron-router</code></p>

<!--more-->


<p>Also replace the code associated with the old router:</p>

<p>Instead of</p>

<p>```javascript
Meteor.Router.add({</p>

<pre><code>'/':'homepage',
'/calendar':'calendar'
</code></pre>

<p>})
```</p>

<p>use this</p>

<p>```javascript
Router.map( function () {
  this.route(&lsquo;homepage&rsquo;, {</p>

<pre><code>path: '/'
</code></pre>

<p>  });
  this.route(&lsquo;calendar&rsquo;);
});
```</p>

<p>Views were rendering fine after the above update.</p>

<p>There is also issue with the Modal, when the calendar is clicked, there were no popups. I&rsquo;ll update when I resolve this issue.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor JS]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/14/meteor-js/"/>
    <updated>2014-07-14T13:54:13+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/14/meteor-js</id>
    <content type="html"><![CDATA[<p>2 hrs</p>

<p>I went to check out the <a href="http://www.innovatist.org/agile-code-camp/">Agile Code Camp</a> today, a JavaScript focused development code camp. The camp emphasizes on learning by building method and the goal is to collaborate and build as many projects for the duration of the camp. The class was split into 5 different groups and each group was asked to come up with an interesting idea to hack and collaborate on for the next 3 weeks.</p>

<p><img class="center" src="/images/posts/agilecodecamp.jpg"></p>

<!--more-->


<p>There were some really interesting concepts:</p>

<ul>
<li>THREE &ndash; messaging app that can be sort by different opics in a 3D space</li>
<li>iFridge &ndash; smart application for your fridge that will help track your items with expiration warnings.</li>
</ul>


<p>Plus a couple more interesting ones.</p>

<p>The project I joined is called &ldquo;3D Tatoo&rdquo;, it&rsquo;s somewhat a message board, where people can leave messages. But the idea is that these messages will be tattooed onto a person that exist in a 3D environment. Plus when these people are getting tatooed, they will be screaming out funny things because of the pain! I find this project to be HILARIOUS and I can&rsquo;t wait to work on it. LOL.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson 2: CSV &amp; Email - Continue]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/12/lesson-2-csv-and-email-continue/"/>
    <updated>2014-07-12T13:51:09+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/12/lesson-2-csv-and-email-continue</id>
    <content type="html"><![CDATA[<p>5 hrs</p>

<p>I finished the <a href="http://www.codecademy.com/tracks/javascript">JavaScript Track</a> today. Woot! Check out my <a href="http://www.codecademy.com/users/scottyu/achievements">badges</a>! The final project was to build a cash register that can &ldquo;scan&rdquo; different items and quantities then calculate the total amount. It was interesting to use the <code>add</code> method in the <code>scan</code> method within the same object. A nested function:</p>

<p>```javascript Cash Register
var cashRegister = {</p>

<pre><code>total:0,
lastTransactionAmount: 0,
add: function(itemCost){
    this.total += (itemCost || 0);
    this.lastTransactionAmount = itemCost;
},
scan: function(item,quantity){
    switch (item){
    case "eggs": this.add(0.98 * quantity); break;
    case "milk": this.add(1.23 * quantity); break;
    case "magazine": this.add(4.99 * quantity); break;
    case "chocolate": this.add(0.45 * quantity); break;
    }
    return true;
),
.
.
.
</code></pre>

<p>};</p>

<p>cashRegister.scan(&lsquo;eggs&rsquo;,2);
cashRegister.scan(&lsquo;milk&rsquo;,3);</p>

<p>// Show the total bill
//toFixed, number into a string, keeping only two decimal
console.log(&lsquo;Your bill is &rsquo;+cashRegister.total.toFixed(2));</p>

<p>```</p>

<!--more-->




<br/>


<p>I also came back around to work on my <a href="https://www.makeitwithcode.com">MakeItWithCode</a> assignment. <a href="/blog/2014/07/12/lesson-2-csv-and-email/">Last HW</a> I used the mailgun gem to send myself an email. The goal this time is to combine powers from twitter, mailgun, and csv gems. To send myself an email attached with twitter seach results in a spreadsheet!</p>

<p>After figuring out how to create and send a csv file through MailGun, I was left with working out how to put them together.</p>

<p>Instead of sending hard-coded info like this:</p>

<p>```
CSV.open(&ldquo;my_results.csv&rdquo;, &ldquo;wb&rdquo;) do |csv|
  csv &lt;&lt; [&ldquo;firstname&rdquo;, &ldquo;lastname&rdquo;, &ldquo;phone&rdquo;, &ldquo;email&rdquo;]
  csv &lt;&lt; [&ldquo;scott&rdquo;, &ldquo;yu&rdquo;, &ldquo;888-8888&rdquo;, &ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#99;&#x6f;&#116;&#116;&#x40;&#114;&#111;&#x62;&#111;&#x74;&#115;&#x2e;&#x63;&#x6f;&#109;">&#x73;&#x63;&#111;&#116;&#116;&#64;&#x72;&#111;&#x62;&#111;&#x74;&#115;&#x2e;&#99;&#x6f;&#x6d;</a>&rdquo;]
end</p>

<p>```</p>

<p>I need to search the twitter feed and put the result in a CSV file. Which means, I can&rsquo;t just use the above example as the search results will all be put in a single row because of the <code>csv &lt;&lt; []</code> iteration.</p>

<p>What I need is a nested iteration that will first open a CSV file and write the results line by line into the file.</p>

<p>```ruby
CSV.open(&ldquo;tweet_result.csv&rdquo;, &ldquo;wb&rdquo;) do |csv|</p>

<pre><code>client.search("learn to code", :result_type =&gt; "recent").take(10).each do |tweet|
    csv &lt;&lt; [tweet.text]
end
</code></pre>

<p>end</p>

<p>```</p>

<br />


<p>Here is the completed script :)</p>

<p>```ruby twitter_spreadsheet_email.rb
require &lsquo;mailgun&rsquo;
require &lsquo;csv&rsquo;
require &lsquo;twitter&rsquo;</p>

<p>client = Twitter::REST::Client.new do |config|
  config.consumer_key    = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
  config.consumer_secret = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
end</p>

<p>CSV.open(&ldquo;tweet_result.csv&rdquo;, &ldquo;wb&rdquo;) do |csv|</p>

<pre><code>client.search("learn to code", :result_type =&gt; "recent").take(10).each do |tweet|
    csv &lt;&lt; [tweet.text]
end
</code></pre>

<p>end</p>

<p>tweets = File.open(&ldquo;tweet_result.csv&rdquo;)</p>

<p>Mailgun.configure do |config|
  config.api_key = &lsquo;private-API-key-XXXXXXXXXXXXXXXX&rsquo;
  config.domain  = &lsquo;sandbox12345.mailgun.org&rsquo;
end</p>

<p>@mailgun = Mailgun()</p>

<p>parameters = {
  :to => &ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x73;&#99;&#111;&#x74;&#x74;&#x40;&#114;&#x6f;&#98;&#111;&#116;&#46;&#99;&#111;&#x6d;">&#115;&#x63;&#111;&#x74;&#x74;&#x40;&#114;&#x6f;&#98;&#x6f;&#116;&#46;&#99;&#111;&#x6d;</a>&rdquo;,
  :subject => &ldquo;Email from a robot&rdquo;,
  :text => &ldquo;Beep beep&hellip;beep..keep programming awesome stuff! Btw, NSA is watching!!&rdquo;,
  :from => &ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#115;&#99;&#111;&#116;&#116;&#x40;&#115;&#97;&#110;&#100;&#x62;&#111;&#x78;&#49;&#50;&#x33;&#x34;&#53;&#46;&#x6d;&#97;&#105;&#108;&#103;&#x75;&#110;&#x2e;&#111;&#x72;&#103;">&#115;&#x63;&#111;&#x74;&#x74;&#64;&#115;&#x61;&#110;&#100;&#x62;&#x6f;&#x78;&#x31;&#x32;&#x33;&#52;&#x35;&#x2e;&#x6d;&#97;&#105;&#x6c;&#103;&#117;&#x6e;&#46;&#x6f;&#x72;&#103;</a>',
  :attachment => File.new(tweets)
}
@mailgun.messages.send_email(parameters)</p>

<p>```</p>

<p>Woot! I got the tweets attachment in my email!</p>

<p><img class="center" src="/images/posts/tweetcsv.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson 2: CSV &amp; Email]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/12/lesson-2-csv-and-email/"/>
    <updated>2014-07-12T13:04:52+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/12/lesson-2-csv-and-email</id>
    <content type="html"><![CDATA[<p>2 hrs</p>

<p>I&rsquo;ve been waiting to jump back on my <a href="https://www.makeitwithcode.com">MakeItWithCode</a> assignment since I&rsquo;m now switching between JavaScript and Ruby.</p>

<p>The goal is to use the MailGun gem and write a simple script that can send emails. When I was trying to run <code>bundle exec ruby send_email.rb</code> I kept on getting the following error:</p>

<p><blockquote><p>$ bundle exec ruby send_email.rb</p></p><p><p>/home/me/.gems/bundler/gems/mailgun-59455c20a860/lib/mailgun/base.rb:80:in `rescue in submit': Domain not found: <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#99;&#x6f;&#x74;&#116;&#64;&#115;&#x61;&#110;&#x64;&#x62;&#x6f;&#x78;&#50;&#x63;&#x30;&#50;&#102;&#x38;&#x30;&#102;&#56;&#52;&#56;&#52;&#52;&#55;&#x61;&#x65;&#x38;&#x63;&#51;&#x30;&#98;&#100;&#x36;&#x66;&#50;&#51;&#x32;&#100;&#49;&#52;&#x32;&#56;&#x2e;&#109;&#97;&#x69;&#x6c;&#x67;&#117;&#x6e;&#46;&#111;&#x72;&#103;">&#115;&#x63;&#111;&#x74;&#116;&#64;&#x73;&#97;&#110;&#100;&#x62;&#x6f;&#x78;&#50;&#x63;&#x30;&#50;&#102;&#x38;&#48;&#102;&#56;&#x34;&#x38;&#x34;&#x34;&#55;&#x61;&#101;&#56;&#99;&#51;&#x30;&#98;&#100;&#x36;&#102;&#x32;&#x33;&#x32;&#x64;&#x31;&#52;&#50;&#x38;&#x2e;&#x6d;&#97;&#x69;&#x6c;&#103;&#x75;&#x6e;&#x2e;&#111;&#114;&#x67;</a> (Mailgun::Error)</p></p><p><p>from /home/me/.gems/bundler/gems/mailgun-59455c20a860/lib/mailgun/base.rb:69:in `submit'</p></p><p><p>from /home/me/.gems/bundler/gems/mailgun-59455c20a860/lib/mailgun/message.rb:18:in `send_email'</p></p><p><p>from send_email.rb:20:in `<main>'</p></p><p><p></p></blockquote></p>

<p>Here is my ruby script:</p>

<p>```ruby send_email.rb
require &lsquo;mailgun&rsquo;</p>

<p>Mailgun.configure do |config|
  config.api_key = &lsquo;private-API-key-XXXXXXXXXXXXXXXX&rsquo;
  config.domain  = &lsquo;<a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#112;&#x6f;&#115;&#116;&#64;&#115;&#x61;&#110;&#x64;&#x62;&#111;&#120;&#49;&#50;&#51;&#x34;&#x35;&#46;&#109;&#97;&#105;&#108;&#103;&#x75;&#x6e;&#46;&#111;&#x72;&#103;">&#x70;&#x6f;&#115;&#x74;&#x40;&#x73;&#x61;&#x6e;&#100;&#x62;&#111;&#120;&#49;&#x32;&#51;&#52;&#x35;&#46;&#x6d;&#97;&#105;&#x6c;&#103;&#x75;&#x6e;&#x2e;&#111;&#114;&#x67;</a>&rsquo;
end</p>

<p>@mailgun = Mailgun()</p>

<p>parameters = {
  :to => &ldquo;<a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#115;&#x63;&#x6f;&#116;&#116;&#64;&#114;&#111;&#x62;&#x6f;&#116;&#46;&#x63;&#x6f;&#109;">&#x73;&#99;&#111;&#116;&#116;&#x40;&#114;&#111;&#98;&#111;&#116;&#x2e;&#99;&#x6f;&#109;</a>&rdquo;,
  :subject => &ldquo;Email from a robot&rdquo;,
  :text => &ldquo;Beep beep&hellip;beep..keep programming awesome stuff!</p>

<pre><code>        Btw, NSA is watching!!",
</code></pre>

<p>  :from => &ldquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#115;&#99;&#x6f;&#x74;&#x74;&#x40;&#115;&#97;&#110;&#100;&#x62;&#111;&#120;&#x31;&#50;&#x33;&#x34;&#53;&#x2e;&#x6d;&#x61;&#x69;&#x6c;&#103;&#117;&#110;&#x2e;&#111;&#114;&#x67;">&#115;&#x63;&#111;&#x74;&#116;&#x40;&#115;&#x61;&#x6e;&#100;&#x62;&#111;&#x78;&#x31;&#x32;&#x33;&#52;&#53;&#x2e;&#x6d;&#97;&#x69;&#x6c;&#x67;&#x75;&#x6e;&#x2e;&#111;&#x72;&#103;</a>&rdquo;
}
@mailgun.messages.send_email(parameters)
```
What is with the error?</p>

<!--more-->


<p>I know that we&rsquo;re supposed to use the private API key but I tried to swap it with the public one anyway and that didn&rsquo;t work. After carefully examine the error message, I noticed the <code>Domain not found:</code> message and I noticed that I have used an email address instead of just the domain name (the domain should be the sandbox domain provided by mailugn).</p>

<p>E.g., &ldquo;sandbox2083412213.mailgun.org&rdquo;.</p>

<p>```ruby send_email.rb
require &lsquo;mailgun&rsquo;</p>

<p>Mailgun.configure do |config|
  config.api_key = &lsquo;private-API-key-XXXXXXXXXXXXXXXX&rsquo;
  config.domain  = &lsquo;sandbox2083412213.mailgun.org&rsquo;
end
.
.
.
```</p>

<p>After I changed that everything went smoothly! I just sent myself an email warning about the NSA!!</p>

<p><img class="center" src="/images/posts/emailsn.png"></p>

<p>What other interesting things are you doing with emailing scripts?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Code Camp]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/11/agile-code-camp/"/>
    <updated>2014-07-11T11:14:11+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/11/agile-code-camp</id>
    <content type="html"><![CDATA[<p>2 hrs</p>

<p>While at the <a href="/blog/2014/07/09/taiwan-startup-meetup/">Taiwan startup meetup</a> a couple of days ago, I expressed my interests in learning coding and checking out some local groups. One awesome guy told me about <a href="http://www.innovatist.org/agile-code-camp/">Agile Code Camp</a>, a free JavaScript development course that practice Agile Development and uses Meteor as web development framework.</p>

<p>I will update once I check out the program! Cheers!</p>
]]></content>
  </entry>
  
</feed>
