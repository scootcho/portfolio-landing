<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Assemblying Scottbot]]></title>
  <link href="http://scootcho.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://scootcho.github.io/"/>
  <updated>2014-07-15T14:40:37+08:00</updated>
  <id>http://scootcho.github.io/</id>
  <author>
    <name><![CDATA[Scott Yu]]></name>
    <email><![CDATA[scott.tj.yu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lesson 2: CSV &amp; Email]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/12/lesson-2-csv-and-email/"/>
    <updated>2014-07-12T13:04:52+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/12/lesson-2-csv-and-email</id>
    <content type="html"><![CDATA[<p>2 hrs</p>

<p>I&rsquo;ve been waiting to jump back on my <a href="https://www.makeitwithcode.com">MakeItWithCode</a> assignment since I&rsquo;m now switching between JavaScript and Ruby.</p>

<p>The goal is to use the MailGun gem and write a simple script that can send emails. When I was trying to run <code>bundle exec ruby send_email.rb</code> I kept on getting the following error:</p>

<p><blockquote><p>$ bundle exec ruby send_email.rb</p></p><p><p>/home/me/.gems/bundler/gems/mailgun-59455c20a860/lib/mailgun/base.rb:80:in `rescue in submit': Domain not found: <a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#115;&#x63;&#111;&#x74;&#x74;&#64;&#115;&#x61;&#110;&#x64;&#x62;&#x6f;&#120;&#50;&#99;&#48;&#50;&#102;&#x38;&#48;&#x66;&#56;&#x34;&#56;&#52;&#x34;&#x37;&#97;&#101;&#56;&#x63;&#51;&#x30;&#98;&#100;&#54;&#102;&#50;&#51;&#x32;&#x64;&#x31;&#52;&#x32;&#x38;&#46;&#x6d;&#x61;&#x69;&#x6c;&#x67;&#117;&#x6e;&#46;&#x6f;&#x72;&#103;">&#115;&#x63;&#111;&#116;&#x74;&#64;&#115;&#x61;&#110;&#100;&#x62;&#x6f;&#120;&#50;&#99;&#48;&#x32;&#102;&#x38;&#x30;&#x66;&#x38;&#52;&#56;&#52;&#x34;&#x37;&#x61;&#101;&#x38;&#x63;&#51;&#48;&#x62;&#100;&#x36;&#x66;&#50;&#51;&#50;&#x64;&#49;&#x34;&#x32;&#56;&#x2e;&#x6d;&#x61;&#x69;&#x6c;&#x67;&#x75;&#110;&#x2e;&#x6f;&#114;&#103;</a> (Mailgun::Error)</p></p><p><p>from /home/me/.gems/bundler/gems/mailgun-59455c20a860/lib/mailgun/base.rb:69:in `submit'</p></p><p><p>from /home/me/.gems/bundler/gems/mailgun-59455c20a860/lib/mailgun/message.rb:18:in `send_email'</p></p><p><p>from send_email.rb:20:in `<main>'</p></p><p><p></p></blockquote></p>

<p>Here is my ruby script:</p>

<p>```ruby send_email.rb
require &lsquo;mailgun&rsquo;</p>

<p>Mailgun.configure do |config|
  config.api_key = &lsquo;private-API-key-XXXXXXXXXXXXXXXX&rsquo;
  config.domain  = &lsquo;<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x70;&#x6f;&#115;&#x74;&#x40;&#115;&#x61;&#110;&#100;&#98;&#111;&#x78;&#x32;&#x30;&#56;&#x33;&#52;&#x31;&#50;&#50;&#x31;&#x33;&#x2e;&#x6d;&#97;&#105;&#108;&#103;&#x75;&#110;&#x2e;&#111;&#x72;&#x67;">&#x70;&#x6f;&#x73;&#116;&#x40;&#115;&#97;&#x6e;&#x64;&#98;&#x6f;&#x78;&#x32;&#x30;&#x38;&#x33;&#52;&#49;&#50;&#x32;&#x31;&#x33;&#x2e;&#x6d;&#x61;&#105;&#108;&#103;&#x75;&#x6e;&#x2e;&#111;&#114;&#x67;</a>&rsquo;
end</p>

<p>@mailgun = Mailgun()</p>

<p>parameters = {
  :to => &ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#115;&#x63;&#111;&#116;&#116;&#x2e;&#116;&#106;&#46;&#x79;&#117;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#115;&#x63;&#x6f;&#x74;&#x74;&#46;&#x74;&#x6a;&#46;&#121;&#x75;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>&rdquo;,
  :subject => &ldquo;Email from a robot&rdquo;,
  :text => &ldquo;Beep beep&hellip;beep..keep programming awesome stuff!</p>

<pre><code>        Btw, NSA is watching!!",
</code></pre>

<p>  :from => &ldquo;<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#115;&#x63;&#x6f;&#116;&#116;&#x40;&#115;&#97;&#x6e;&#x64;&#x62;&#111;&#x78;&#50;&#48;&#56;&#51;&#52;&#x31;&#x32;&#x32;&#x31;&#51;&#46;&#x6d;&#x61;&#x69;&#x6c;&#x67;&#x75;&#110;&#x2e;&#111;&#x72;&#x67;">&#115;&#99;&#x6f;&#116;&#116;&#64;&#x73;&#97;&#110;&#100;&#98;&#111;&#120;&#50;&#x30;&#x38;&#51;&#x34;&#x31;&#50;&#50;&#49;&#x33;&#x2e;&#x6d;&#97;&#x69;&#108;&#103;&#117;&#110;&#x2e;&#x6f;&#x72;&#x67;</a>&rdquo;
}
@mailgun.messages.send_email(parameters)
```
What is with the error?</p>

<!--more-->


<p>I know that we&rsquo;re supposed to use the private API key but I tried to swap it with the public one anyway and that didn&rsquo;t work. After carefully examine the error message, I noticed the <code>Domain not found:</code> message and I noticed that I have used an email address instead of just the domain name (the domain should be the sandbox domain provided by mailugn).</p>

<p>E.g., &ldquo;sandbox2083412213.mailgun.org&rdquo;.</p>

<p>```ruby send_email.rb
require &lsquo;mailgun&rsquo;</p>

<p>Mailgun.configure do |config|
  config.api_key = &lsquo;private-API-key-XXXXXXXXXXXXXXXX&rsquo;
  config.domain  = &lsquo;sandbox2083412213.mailgun.org&rsquo;
end
.
.
.
```</p>

<p>After I changed that everything went smoothly! I just sent myself an email warning about the NSA!!</p>

<p><img class="center" src="/images/emailsn.png"></p>

<p>What other interesting things are you doing with emailing scripts?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson 1: Twitter API]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/03/lesson-1-twitter-api/"/>
    <updated>2014-07-03T10:38:17+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/03/lesson-1-twitter-api</id>
    <content type="html"><![CDATA[<p>2 hrs</p>

<p>Today I received the first lesson from the <a href="https://www.makeitwithcode.com">MakeItWithCode</a> team. The lesson briefly covers some basics for beginners such as linux commands and run <code>bundle</code> to install Ruby gems. But the emphasis of this course is to build things so it dives striaght into the <a href="https://github.com/sferik/twitter">Twitter Ruby Gem</a>, which I like.</p>

<p>You&rsquo;ll need to signup for a <a href="https://dev.twitter.com/apps/new">witter Developer Account</a> to access the API. Once that&rsquo;s done, use the keys from the Twitter Developer Account in your code.</p>

<!--more-->


<p>The first task is to get the first weet from a specified user, in this example, I used my own twitter handle, <code>scootcho</code>:</p>

<p>```ruby gets_tweets.rb
require &lsquo;twitter&rsquo;</p>

<h1>Authentication details from twitter, your starting</h1>

<h1>point is here: <a href="https://dev.twitter.com/apps/new">https://dev.twitter.com/apps/new</a></h1>

<p>client = Twitter::REST::Client.new do |config|
  config.consumer_key    = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
  config.consumer_secret = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
end</p>

<h1>Get the first tweet of the specified user</h1>

<p>puts client.user_timeline(&ldquo;scootcho&rdquo;).first.text
```</p>

<p>Next, print out the tweets to screen:</p>

<p>```ruby gets_tweets.rb</p>

<p>require &lsquo;twitter&rsquo;</p>

<p>client = Twitter::REST::Client.new do |config|
  config.consumer_key    = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
  config.consumer_secret = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
end</p>

<h1>twitter handle to get tweets for</h1>

<p>the_twitter_handle = &ldquo;scootcho&rdquo;</p>

<h1>go through each tweet and print out the text</h1>

<p>client.user_timeline(the_twitter_handle).each do |tweet|</p>

<pre><code>puts tweet.text
</code></pre>

<p>end; nil
```</p>

<p>Pick a Twitter Handle and displays the 10 most recent tweets mentioning &ldquo;learn to code&rdquo;:</p>

<p>```ruby gets_tweets.rb
require &lsquo;twitter&rsquo;</p>

<p>client = Twitter::REST::Client.new do |config|
  config.consumer_key    = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
  config.consumer_secret = &ldquo;xxxxxxxxxxxxxxxxxx&rdquo;
end
client.search(&ldquo;learn to code&rdquo;, :result_type => &ldquo;recent&rdquo;).take(10).each do |tweet|
  puts tweet.text
end
```</p>

<p>There are a couple more things I would like to play with the Twitter API based on suggestions:</p>

<ul>
<li>Make the script tweet for you</li>
<li>Try and conduct some more advanced searches using the Twitter query syntax explained <a href="https://dev.twitter.com/docs/using-search" target="_blank">here</a>:</li>
</ul>


<p>I will follow up with the progress in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Times Ahead!]]></title>
    <link href="http://scootcho.github.io/blog/2014/07/01/good-times-ahead/"/>
    <updated>2014-07-01T18:29:51+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/07/01/good-times-ahead</id>
    <content type="html"><![CDATA[<p>Tomorrow, I will be starting the 10 week programming curriculumn at <a href="https://www.makeitwithcode.com">MakeItWithCode</a>. I will document my learning process here to help myself clarify and understand some concepts. Oh yea, and for memorization too because I have a terrible, terrible memory.</p>

<p>Here is the sneak peak of the <strong>course syllabus</strong>, which obtained from the site once you provide your email address.</p>

<!--more-->




<h2 style="text-align:center;">Course syllabus</h2>


<p><strong>Lesson 1: Twitter API</strong></p>

<p>This is all about getting you used to your development environment and working with other people's code. By the end, you'll be using Ruby to search Twitter and display results the Terminal.</p>


<p><strong>Lesson 2: CSV &amp; Email</strong>
Data is of limited use when it&rsquo;s stuck within the Terminal. In this lesson, you&rsquo;ll create a simple tool to email yourself an attachment containing the data from your Twitter search.</p>

<p><strong>Lesson 3: Simple Web App</strong></p>

<p>Building web apps is the reason many people start learning to code. To start with the basics, you'll build a static web app with 3 pages using Twitter Bootstrap to add a professional layout.</p>


<p><strong>Lesson 4: Dynamic Web App</strong></p>

<p>Expanding on the previous lesson, this project makes your web app a bit more interactive. You'll end up with a web app that searches Twitter for tweets about dogs and display them live.</p>


<p><strong>Lesson 5: Web Scraper</strong></p>

<p>APIs are awesome for slicing and dicing data from websites, but in practice many sites don't offer one. So to extract the data from Reddit, you're going to construct a simple little web scraper.</p>


<p><strong>Lesson 6: ToDo List</strong></p>

<p>This is your first introduction to databases. Building on your basic web app, you'll build a ToDo list that you can add items to from the Terminal and view live in your web app.</p>


<p><strong>Lesson 7: Useful ToDo List</strong></p>

<p>Working from the ToDo List, you'll learn a bit more about databases so you can update your list and remove items. You'll be able to mark ToDo items as completed from within the web app.</p>


<p><strong>Lesson 8: Dashboard</strong></p>

<p>By this point you'll have realised that using other people's code makes work much easier. This lesson is the best example of that, as you'll end up with an awesome dashboard.</p>


<p><strong>Lesson 9: Dashboard Deployed!</strong></p>

<p>You've got a bunch of cool things to show off, now you need to get them online! You're going to tweak the dashboard with a custom widget, upload it to Github and deploy it to Heroku.</p>


<p><strong>Lesson 10: Complete Website</strong></p>

<p>One of the most valuable things about knowing how to code is the freedom to throw up simple websites with little time and no money. Whether for a personal portfolio or a client. In this final lesson, you're going to take a Bootstrap template, convert it into a Sinatra application and deploy a real, working website.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Ruby Review]]></title>
    <link href="http://scootcho.github.io/blog/2014/06/29/more-ruby-review/"/>
    <updated>2014-06-29T23:30:50+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/06/29/more-ruby-review</id>
    <content type="html"><![CDATA[<p>5 hrs</p>

<p>Finished reviewing Codecademy&rsquo;s <a href="http://www.codecademy.com/tracks/ruby">Ruby Track</a> today.</p>

<p>Here are some more snippets:</p>

<p>```ruby use proc and assign a variable named &lsquo;cube&rsquo; that will cube an array of numbers
cube = Proc.new { |x| x ** 3 }</p>

<p>[1, 2, 3].collect!(&amp;cube)
=> [1, 8, 27]</p>

<p>[4, 5, 6].map!(&amp;cube)
=> [64, 125, 216]
```</p>

<!--more-->


<p>```ruby Create a program that will keep track of movie ratings.</p>

<p>movies = {
  Memento: 3,
  Primer: 4,
  Ishtar: 1
}</p>

<p>puts &ldquo;What would you like to do?&rdquo;
puts &ldquo;&mdash; Type &lsquo;add&rsquo; to add a movie.&rdquo;
puts &ldquo;&mdash; Type &lsquo;update&rsquo; to update a movie.&rdquo;
puts &ldquo;&mdash; Type &lsquo;display&rsquo; to display all movies.&rdquo;
puts &ldquo;&mdash; Type &lsquo;delete&rsquo; to delete a movie.&rdquo;</p>

<p>choice = gets.chomp.downcase</p>

<p>case choice
when &lsquo;add&rsquo;</p>

<pre><code> puts "What movie do you want to add?"

 title = gets.chomp

 if movies[title.to_sym].nil?
   puts "What's the rating? (Type a number 0 to 4.)"
   rating = gets.chomp
   movies[title.to_sym] = rating.to_i
   puts "#{title} has been added with a rating of #{rating}."
 else
   puts "That movie already exists! Its rating is #{movies[title.to_sym]}."
 end
</code></pre>

<p>when &lsquo;update&rsquo;</p>

<pre><code> puts "What movie do you want to update?"

 title = gets.chomp

 if movies[title.to_sym].nil?
   puts "Movie not found!"
 else
   puts "What's the new rating? (Type a number 0 to 4.)"
   rating = gets.chomp
   movies[title.to_sym] = rating.to_i
   puts "#{title} has been updated with new rating of #{rating}."
 end
</code></pre>

<p>when &lsquo;display&rsquo;</p>

<pre><code> movies.each do |movie, rating|
   puts "#{movie}: #{rating}"
 end
</code></pre>

<p>when &lsquo;delete&rsquo;</p>

<pre><code> puts "What movie do you want to delete?"

 title = gets.chomp

 if movies[title.to_sym].nil?
   puts "Movie not found!"
 else
   movies.delete(title.to_sym)
   puts "#{title} has been removed."
 end
</code></pre>

<p>else</p>

<pre><code> puts "Sorry, I didn't understand you."
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Ruby Review]]></title>
    <link href="http://scootcho.github.io/blog/2014/06/28/some-ruby-review/"/>
    <updated>2014-06-28T21:35:24+08:00</updated>
    <id>http://scootcho.github.io/blog/2014/06/28/some-ruby-review</id>
    <content type="html"><![CDATA[<p>2.5 hrs</p>

<p>I have signed up for a new online Ruby curriculum which will start next week. We&rsquo;ll be building 10 projects in 10 weeks. I figure I&rsquo;d review some materials from Codecademy&rsquo;s <a href="http://www.codecademy.com/tracks/ruby">Ruby Track</a> I&rsquo;ve completed <a href="http://www.codecademy.com/users/scottyu/achievements">last month</a>.</p>

<p>I spent about 2.5 hours review part of the material and will continue the review tomorrow.</p>

<p>Here are some review snipets:</p>

<p><code>ruby How do you sort a word by individual character?
"sortme".chars.sort
=&gt; ["e", "m", "o", "r", "s", "t"]
</code></p>

<!--more-->


<p>```ruby Split name to firstname and lastname with one-line %}
name = &ldquo;Scott Yu&rdquo;</p>

<p>firstname, lastname = name.split
=> [&ldquo;Scott&rdquo;, &ldquo;Yu&rdquo;]
firstname
=> &ldquo;Scott&rdquo;
lastname
=> &ldquo;Yu&rdquo;
name
=> &ldquo;Scott Yu&rdquo;
```</p>

<p>```ruby true or false %}
1.eql?(1.0)</p>

<p>=> false.</p>

<h1>True if the receiver and argument have both</h1>

<h1>the same numeric type and equal values.</h1>

<p>```</p>

<p>```ruby set default hash value %}
hash = Hash.new(&ldquo;notnil&rdquo;)</p>

<p>hash
=> {}</p>

<p>hash[5]
=> &ldquo;notnil&rdquo;
```</p>
]]></content>
  </entry>
  
</feed>
